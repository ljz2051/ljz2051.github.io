<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ljz-blog</title>
  
  <subtitle>爱学习、爱音乐、爱生活～</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-01T04:46:36.609Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Li Jinzhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019年度总结</title>
    <link href="http://yoursite.com/2020/01/01/2019summary/"/>
    <id>http://yoursite.com/2020/01/01/2019summary/</id>
    <published>2020-01-01T04:38:00.000Z</published>
    <updated>2020-01-01T04:46:36.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））"><a href="#【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））" class="headerlink" title="【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））"></a>【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））</h1><p>转眼已经到了2019年的最后一天，感觉这一年真的是人生中特别重要的一年，有很多遗憾和难过，也有很多的收获；这是第一次写年度总结，希望通过这样一种方式，能给自己留下一些以后可以回忆的东西。<br><a id="more"></a></p><h2 id="科研：小论文-专利-大论文"><a href="#科研：小论文-专利-大论文" class="headerlink" title="科研：小论文 + 专利 + 大论文"></a>科研：小论文 + 专利 + 大论文</h2><p>年初花了两个月的时间，将小论文初版写完，开学之后又用了一个多月时间，就论文中的创新点，审请了专利（专利和论文都要投的话，一定要先申请专利，因为专利审核会查论文，论文审核不会查专利；只要保证论文发表的时候，专利申请已经提交应该就可以）；而后就开始了我漫长的小论文投递之旅。。。。。。在五月份中旬，在老师的推荐下，投了一个还可以的EI期刊，然后经历了两次退修，期间在老师的指导下改了n多版，终于上周被录用，明年发表，小论文从投递到发表，历时八九个月，煎熬啊（捂脸）（如果研一或者研二上有精力，还是先把小论文搞定的比较好）。然后就是大论文了，元旦之后几天要写完吧，感觉还得加班加点写几天。</p><h2 id="工作：-实习-秋招"><a href="#工作：-实习-秋招" class="headerlink" title="工作： 实习 + 秋招"></a>工作： 实习 + 秋招</h2><p>研三狗必须考虑的问题，实习和找工作。今年（2019）是2月份过年，寒假开学后，就陆陆续续地开始实习的提前批,(哎呀, 当时没想到会这么早，看着很多同学开始面试了，我还没怎么准备（捂脸）)，在实验室刷题刷了一个来月之后，开始投实习简历，有顺利也有不顺利的。当时比较难过的就是，第一家面的Ali被挂掉了（A是2019年3月份就开始实习招聘，比较早，很无奈）,现在想起来，当时真的是面试没有经验，很多表现不好。而后又面了KS，DD,WB,顺利拿到实习offer,选择去WB实习了一段时间后，很幸运地被A的另一部门捞到，并很幸运地通过了面试，暑假后半段时间就到A去实习了。A的实习转正概率很高，也是我想去A实习一个主要原因。</p><p>可能是觉得实习这边转正比较稳，感觉和其他同学比起来，我的秋招好佛系（捂脸），到10月中下旬的时候，看着周围同学每天忙碌面试，我也又去面了几家。最后还是选择留在了阿里。这里给部门打个广告，如果对实时计算、大数据或者存储感兴趣的同学，欢迎找我内推哈～实习和正式应该都可以哈。关于秋招和实习的经验分享就不多说了，相关的帖子和学长分享大家应该都见过很多。最后简单说几点感想：</p><ol><li>找实习/秋招一定要有自己的时间规划，尽量早点准备，晚了也不要慌，everything will be fine;</li><li>很多人推荐刷题，是针对马上找实习的同学；如果是研一或者本科的同学，还是要应该多考虑如何能够提升自身的能力，打好基础，个人觉得才是最重要的；</li><li>关于工作选择，互联网/国企，前端/后端/其他，等等会有很多选择，一方面，应该尽早确定自己的发展方向，好早做准备；另一方面，选择的时候不要盲目跟风，完全听信他人，还是要结合自己的实际情况，在别人的建议基础之上，有自己独立的思考和判断；</li></ol><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ol><li>年初的时候，有了Qing的联系方式。自己是个恋爱小白，一路磕磕碰碰地和Qing增进关系，追了她快10个月，终于答应可以在一起了，未来就努力对她好吧。</li><li>年初的时候定的目标，要学会游泳，夏天的时候Chen同学教了两次，之后因为有事要忙，就没有再学了，感觉再下两三次水就差不多了，明年争取学会；前几天第一次去滑雪，感觉学会了基本的方法？马马虎虎吧。</li><li>去年自学了半年的吉他，今年比较事多，基本算是荒废了，以后有时间慢慢捡起来。</li><li>9月份立的flag要读的几本书也没读完（捂脸），明年继续。</li><li>个人博客也年久失修(捂脸)，后面希望继续维护起来～</li></ol><h2 id="关于以后的想法"><a href="#关于以后的想法" class="headerlink" title="关于以后的想法"></a>关于以后的想法</h2><ol><li>还有半年就要离开生活了七年的北邮了，多少有点不舍，珍惜还有的半年时光；</li><li>感觉自己社交能力不够强，和不熟的人在一起，比较容易尬聊，这方面的能力有待加强啊，不知道有没有什么好的方法？</li><li>有时候感觉自己逻辑组织能力不够强，将自己大脑中的想法快速组织成语言进行表达的能力不够强，思维表达方式还得加强相关的练习啊。</li><li>关于工作的想法：工作领域相关的知识深入的学习？学英语？</li><li>最后，希望自己和研三的同学都能顺利毕业～</li></ol><h2 id="另一些想说的"><a href="#另一些想说的" class="headerlink" title="另一些想说的"></a>另一些想说的</h2><ol><li>上面列的更多的是收获，当然也有一些遗憾，过程当中也有很多失望难过的时候。人生就是这样，你可能觉得当下艰难，当回首往事的时候，曾经的经历都是很美好的回忆。遗憾和难过不怎么想列举，是想让自己尽量忘掉这些，人生就应该朝更加积极的一面去看待，让自己难过和遗憾的事情，都尽量抛之脑后，不去计较。</li><li>前几天看到一句话很喜欢，“坚持并不是永不动摇，而是在犹豫和退缩的时刻决定继续往前走。”</li><li>最后祝大家新年快乐，希望大家在新的一年里都能够心如所愿，心想事成～</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））&quot;&gt;&lt;a href=&quot;#【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））&quot; class=&quot;headerlink&quot; title=&quot;【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））&quot;&gt;&lt;/a&gt;【研三】2019年度总结（想到哪儿写到哪儿（手动狗头））&lt;/h1&gt;&lt;p&gt;转眼已经到了2019年的最后一天，感觉这一年真的是人生中特别重要的一年，有很多遗憾和难过，也有很多的收获；这是第一次写年度总结，希望通过这样一种方式，能给自己留下一些以后可以回忆的东西。&lt;br&gt;
    
    </summary>
    
    
      <category term="阶段总结" scheme="http://yoursite.com/tags/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>回溯算法（Backtracking）</title>
    <link href="http://yoursite.com/2018/12/14/backtracking/"/>
    <id>http://yoursite.com/2018/12/14/backtracking/</id>
    <published>2018-12-14T07:12:12.000Z</published>
    <updated>2019-03-07T15:22:27.677Z</updated>
    
    <content type="html"><![CDATA[<!-- # Backtracking(回溯算法)--><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。\<br>wikipedia : <a href="https://en.wikipedia.org/wiki/Backtracking" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Backtracking</a><br><a id="more"></a>     </p><h2 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2.适用场景"></a>2.适用场景</h2><p>一般来讲，会设置一个递归函数，函数的参数会携带一些当前的可能解的信息，根据这些参数得出可能解或者不可能而回溯. \<br>可以应用的场景有：N皇后、数独、集合等。\<br>回溯算法其实是暴力求解的一种优化。 </p><h2 id="3-算法伪码"><a href="#3-算法伪码" class="headerlink" title="3.算法伪码"></a>3.算法伪码</h2><p>来自维基百科<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In order to apply backtracking to a specific class of problems, one must provide the data P for the particular instance of the problem that is to be solved, and six procedural parameters, root, reject, accept, first, next, and output. These procedures should take the instance data P as a parameter and should do the following:</span><br><span class="line"></span><br><span class="line">root(P): return the partial candidate at the root of the search tree.</span><br><span class="line">reject(P,c): return true only if the partial candidate c is not worth completing.</span><br><span class="line">accept(P,c): return true if c is a solution of P, and false otherwise.</span><br><span class="line">first(P,c): generate the first extension of candidate c.</span><br><span class="line">next(P,s): generate the next alternative extension of a candidate, after the extension s.</span><br><span class="line">output(P,c): use the solution c of P, as appropriate to the application.</span><br><span class="line">The backtracking algorithm reduces the problem to the call bt(root(P)), where bt is the following recursive procedure:</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">procedure bt(c)</span><br><span class="line">  <span class="keyword">if</span> reject(P,c) then <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> accept(P,c) then output(P,c)</span><br><span class="line">  s ← first(P,c)</span><br><span class="line">  <span class="keyword">while</span> s ≠ NULL do</span><br><span class="line">    bt(s)</span><br><span class="line">    s ← next(P,s)</span><br></pre></td></tr></table></figure><h2 id="4-例子"><a href="#4-例子" class="headerlink" title="4.例子"></a>4.例子</h2><p>leetcode 216题  <a href="https://leetcode.com/problems/combination-sum-iii/" target="_blank" rel="noopener">https://leetcode.com/problems/combination-sum-iii/</a></p><p>Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers. \<br>Example 1: \<br>Input: k = 3, n = 7<br>Output: [[1,2,4]]  \<br>Example 2: \<br>Input: k = 3, n = 9<br>Output: [[1,2,6], [1,3,5], [2,3,4]]</p><p>BackTracking Solution:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum3(<span class="keyword">int</span> k, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//!!!有时候需要对数组排序， Arrays.sort(list);</span></span><br><span class="line">        backTracing(ans, <span class="keyword">new</span> ArrayList&lt;&gt;(), k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backTracing</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; comb, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comb.size() == k &amp;&amp; n == <span class="number">0</span>) &#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(comb);</span><br><span class="line">            ans.add(list);   <span class="comment">//!!! ans.add(new ArrayList&lt;&gt;(tempList));  </span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comb.size() == k || n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= <span class="number">9</span> ; i++) &#123;</span><br><span class="line">                comb.add(i);</span><br><span class="line">                backTracing(ans, comb, k, n - i, i+<span class="number">1</span>);</span><br><span class="line">                comb.remove(comb.size() - <span class="number">1</span>);    <span class="comment">//!!! tempList.remove(tempList.size() - 1);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Backtracking(回溯算法)--&gt;
&lt;h2 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1. 定义&quot;&gt;&lt;/a&gt;1. 定义&lt;/h2&gt;&lt;p&gt;回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。\&lt;br&gt;wikipedia : &lt;a href=&quot;https://en.wikipedia.org/wiki/Backtracking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wiki/Backtracking&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树DFS和BFS 递归/非递归方式</title>
    <link href="http://yoursite.com/2018/12/13/dfsandbfs/"/>
    <id>http://yoursite.com/2018/12/13/dfsandbfs/</id>
    <published>2018-12-13T01:35:23.000Z</published>
    <updated>2019-03-26T14:14:33.504Z</updated>
    
    <content type="html"><![CDATA[<!-- # 二叉树DFS和BFS 递归/非递归方式--><h2 id="1-DFS"><a href="#1-DFS" class="headerlink" title="1.DFS"></a>1.DFS</h2><p>DFS, 深度优先遍历 \<br>（1）递归形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">traversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    list.add(root);</span><br><span class="line">    dfs(root.left);</span><br><span class="line">    dfs(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)非递归形式 （利用栈来递归）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">traversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.empty()) &#123;</span><br><span class="line">        TreeNode node = stack.pop();</span><br><span class="line">        res.add(node);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-BFS"><a href="#2-BFS" class="headerlink" title="2.BFS"></a>2.BFS</h2><p>BFS，广度优先遍历，对应二叉树的层级遍历 \<br>(1)非递归形式 （利用队列实现遍历）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">traversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> bfs(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">bfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//if (root == null) return null;</span></span><br><span class="line">        <span class="keyword">int</span> curNum = <span class="number">1</span>;   <span class="comment">//维护当前层的node数量</span></span><br><span class="line">        <span class="keyword">int</span> nextNum = <span class="number">0</span>;  <span class="comment">//维护下一层的node数量</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            list.add(node);</span><br><span class="line">            curNum--;</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">                nextNum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">                nextNum++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (curNum == <span class="number">0</span>) &#123;</span><br><span class="line">                curNum = nextNum;</span><br><span class="line">                nextNum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>(2)递归形式 \<br>这里所谓的bfs递归形式，是利用dfs的递归形式，在递归过程中记录每个node的level，然后将属于一个level的node放到一list里面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;TreeNode&gt;&gt; traversal(TreeNode root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    List&lt;List&lt;TreeNode&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    dfs(root, <span class="number">0</span>, list);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> level, List&lt;List&lt;TreeNode&gt;&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (level &gt;= list.size()) &#123;</span><br><span class="line">        List&lt;TreeNode&gt; subList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        subList.add(root);</span><br><span class="line">        list.add(subList);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list.get(level).add(root);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root.left, level+<span class="number">1</span>, list);</span><br><span class="line">    dfs(root.right, level+<span class="number">1</span>, list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-二叉树的中序遍历"><a href="#3-二叉树的中序遍历" class="headerlink" title="3. 二叉树的中序遍历"></a>3. 二叉树的中序遍历</h2><p>（1）递归形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> in-order(TreeNode root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    in-order(root.left);</span><br><span class="line">    visit(root.val);</span><br><span class="line">    in-order(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)非递归形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> in-order(TreeNode root) &#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        root = stack.pop();</span><br><span class="line">        visit(root);</span><br><span class="line">        root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><hr><br>图的深度优先遍历和广度优先遍历，和二叉树的dfs、bfs原理的相同的。一般，深度优先遍历利用栈来实现（或者递归），广度优先遍历利用队列来实现。</p><p>list.add(index, element):在index处添加元素element, 原先该位置的元素和后续的元素会后移<br>list.set(index, element):替换index处的元素，替换为element</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # 二叉树DFS和BFS 递归/非递归方式--&gt;
&lt;h2 id=&quot;1-DFS&quot;&gt;&lt;a href=&quot;#1-DFS&quot; class=&quot;headerlink&quot; title=&quot;1.DFS&quot;&gt;&lt;/a&gt;1.DFS&lt;/h2&gt;&lt;p&gt;DFS, 深度优先遍历 \&lt;br&gt;（1）递归形式&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TreeNode&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x) &amp;#123; val = x; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java堆上的对象</title>
    <link href="http://yoursite.com/2018/12/12/jvm%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/12/12/jvm中的对象/</id>
    <published>2018-12-12T07:42:53.000Z</published>
    <updated>2019-02-28T03:17:28.223Z</updated>
    
    <content type="html"><![CDATA[<!--# Java堆上的对象--><h2 id="1-对象的创建（new-Object）"><a href="#1-对象的创建（new-Object）" class="headerlink" title="1.对象的创建（new Object）"></a>1.对象的创建（new Object）</h2><ul><li>创建过程：先检查能否在常量池中定位到一个类的符号引用，并且检查其代表的类是否被加载、解析和初始化过；若无，执行类加载过程；然后为新生对象分配内存（类加载完成后即可确定对象大小）;内存分配完后，内存空间初始化为零；接下来，对对象的类信息、类的元数据信息、对象哈希码、GC分代年龄进行设置（这些信息存放在对象头中（Object Header））；然后执行\&lt;init>方法（按照程序员的意愿进行初始化）;<a id="more"></a></li><li>java堆上内存分配的两种方式：”指针碰撞“（中间一个指针作为空闲内存和用过内存的分界点）、”空闲列表“（列表记录哪些内存块可用），采用哪种方式取决于垃圾收集器是否带有压缩整理功能。 分配内存时考虑线程安全问题：CAS失败重试，或者使用本地线程分配缓冲（TLAB）(类似于ThreadLocal)<h2 id="2-对象的内存布局"><a href="#2-对象的内存布局" class="headerlink" title="2.对象的内存布局"></a>2.对象的内存布局</h2></li><li>3个区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）.</li><li>对象头； 两部分信息：第一部分用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有锁、偏向线程ID、偏向时间戳等；另一部分是类型指针，即对象指向类元数据的指针。 如果对象是Java数组，对象头中需要记录数组长度<h2 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3.对象的访问定位"></a>3.对象的访问定位</h2>通过栈上reference数据来操作，主流的访问方式两种：</li><li>句柄：reference存储的是句柄地址，句柄池中的句柄包含了对象实例数据和类型数据的地址信息</li><li>直接指针访问：reference中存放的直接就是对象地址。</li><li>对比：句柄方式稳定，对象移动时，只需改变句柄中的实例数据指针，reference不用变；直接指针方式速度更快，因为节省了一次指针定位的时间开销。Sun HotSpot使用指针方式。</li></ul><hr><p>String.intern()是一个Native方法，作用：若字符串常量池中已经包含了一个等于String对象的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。\<br>StirngBuilder创建的字符串实例在Java堆上。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# Java堆上的对象--&gt;
&lt;h2 id=&quot;1-对象的创建（new-Object）&quot;&gt;&lt;a href=&quot;#1-对象的创建（new-Object）&quot; class=&quot;headerlink&quot; title=&quot;1.对象的创建（new Object）&quot;&gt;&lt;/a&gt;1.对象的创建（new Object）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建过程：先检查能否在常量池中定位到一个类的符号引用，并且检查其代表的类是否被加载、解析和初始化过；若无，执行类加载过程；然后为新生对象分配内存（类加载完成后即可确定对象大小）;内存分配完后，内存空间初始化为零；接下来，对对象的类信息、类的元数据信息、对象哈希码、GC分代年龄进行设置（这些信息存放在对象头中（Object Header））；然后执行\&amp;lt;init&gt;方法（按照程序员的意愿进行初始化）;
    
    </summary>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java虚拟机运行时内存区域</title>
    <link href="http://yoursite.com/2018/12/12/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/12/12/jvm内存区域/</id>
    <published>2018-12-12T02:24:19.000Z</published>
    <updated>2019-02-28T03:16:39.909Z</updated>
    
    <content type="html"><![CDATA[<!--# java虚拟机运行时内存区域 --><p>程序计数器、Java虚拟机栈、本地方法栈、Java堆、方法区 （前3个为线程私有，后2个为线程共享）</p><hr><h3 id="（1）程序计数器"><a href="#（1）程序计数器" class="headerlink" title="（1）程序计数器"></a>（1）程序计数器</h3><p>当前线程所执行的字节码的行号指示器；通过改变这个计数器的值来选取下一条需要执行的字节码指令；分支、循环、跳转、异常处理、线程恢复等功能依赖其完成；线程切换后能恢复到正确的执行位置，故每个线程需要一个独立的程序计数器，即“线程私有”.<br><a id="more"></a></p><h3 id="（2）Java虚拟机栈"><a href="#（2）Java虚拟机栈" class="headerlink" title="（2）Java虚拟机栈"></a>（2）Java虚拟机栈</h3><ul><li>Java Virtual Machine Stacks; 也就是通常所说的“栈”；线程私有；</li><li>存在数据结构–栈帧（Stack Frame）,用于存储局部变量表、操作数栈、方法出口等；局部变量表中存放了<strong>编译期可知</strong>的基本数据类型（boolean,int….）、对象引用（reference,可以理解为指向对象起始位置的引用指针，或者代表对象的句柄）</li><li>存在两种异常： 1）StackOverflowError(栈溢出)： 请求栈深度大于虚拟机栈深度  2）OutOfMemoryError(OOM): 动态扩展内存时，无法申请到足够的内存<h3 id="（3）本地方法栈"><a href="#（3）本地方法栈" class="headerlink" title="（3）本地方法栈"></a>（3）本地方法栈</h3>与虚拟机栈作用类似；虚拟机栈为虚拟机执行Java方法服务，本地方法栈为虚拟机使用到底Native方法服务； 也会抛出StackOverflowError和OutOfMemoryError异常<h3 id="（4）Java堆"><a href="#（4）Java堆" class="headerlink" title="（4）Java堆"></a>（4）Java堆</h3></li><li>Java Heap；所有线程共享的一块内存区域；唯一目的：存放对象实例（对象实例和数组）；</li><li>java堆是垃圾收集器管理的主要区域；一般采用分代收集算法；细分为：新生代和老年代，再细致点有Eden空间、From Survivor空间、To Survivor空间等；某些情况下，Java堆坑可能划分出多个线程私有的分配缓冲区（TLAB）；</li><li>可以通过-Xmx和-Xms控制堆大小；当堆内存无法扩展时，会抛出OOM<h3 id="（5）方法区"><a href="#（5）方法区" class="headerlink" title="（5）方法区"></a>（5）方法区</h3></li><li>线程共享的内存区域；用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据；在HotSpot虚拟机中称为“永久代”</li><li><strong>运行时常量池</strong>是方法区的一部分， 用于存放编译器生成的各种字面量和符号引用；运行时也可能将新的常量放入池中，例如String的intern()方法</li><li>jdk8取消了永久代，存储在永久代的部分数据就已经转移到Java Heap或者Native memory，符号引用(Symbols)转移到了native memory；<strong>字符串常量池(interned strings)转移到了Java heap</strong>；类的静态变量(class statics)转移到了Java heap;方法存放于元空间(Metaspace)</li></ul><p>注：直接内存（Direct Memory）：不是虚拟机中的内存区域；NIO中基于通道（Channel）和缓冲区（Buffer）的IO方式，可以使用Native函数库分配对外内存，然后通过DirectByteBuffer作为引用对其操作，不会收到堆大小的限制。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# java虚拟机运行时内存区域 --&gt;
&lt;p&gt;程序计数器、Java虚拟机栈、本地方法栈、Java堆、方法区 （前3个为线程私有，后2个为线程共享）&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;（1）程序计数器&quot;&gt;&lt;a href=&quot;#（1）程序计数器&quot; class=&quot;headerlink&quot; title=&quot;（1）程序计数器&quot;&gt;&lt;/a&gt;（1）程序计数器&lt;/h3&gt;&lt;p&gt;当前线程所执行的字节码的行号指示器；通过改变这个计数器的值来选取下一条需要执行的字节码指令；分支、循环、跳转、异常处理、线程恢复等功能依赖其完成；线程切换后能恢复到正确的执行位置，故每个线程需要一个独立的程序计数器，即“线程私有”.&lt;br&gt;
    
    </summary>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>树的遍历总结</title>
    <link href="http://yoursite.com/2018/03/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/27/二叉树的遍历总结/</id>
    <published>2018-03-27T02:34:18.000Z</published>
    <updated>2019-03-29T07:04:10.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h3><p>（1）递归形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    visit(root);</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)非递归形式<br>方式一: 用栈来只保存右节点:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">        visit(root);</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        root = root.left;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> &amp;&amp; !stack.isEmpty()) &#123;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方式二：用栈保存两个子节点:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">        TreeNode node = stack.pop();</span><br><span class="line">        visit(node);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="二叉树后序遍历"><a href="#二叉树后序遍历" class="headerlink" title="二叉树后序遍历"></a>二叉树后序遍历</h3><p>（1）递归<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root = <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    postOrder(root.left);</span><br><span class="line">    postOrder(root.right);</span><br><span class="line">    visit(root);</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>（2）非递归<br>按照“头右左”进行遍历，然后翻转<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">       Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       stack.push(root);</span><br><span class="line">       <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">           TreeNode node = stack.pop();</span><br><span class="line">           list.addFirst(node.val);</span><br><span class="line">           <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">               stack.push(node.left);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">               stack.push(node.right);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="多叉树的遍历"><a href="#多叉树的遍历" class="headerlink" title="多叉树的遍历"></a>多叉树的遍历</h3><p>（1）多叉树定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> _val,List&lt;Node&gt; _children)</span> </span>&#123;</span><br><span class="line">        val = _val;</span><br><span class="line">        children = _children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>（2）多叉树前序遍历 非递归<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) reutrn;</span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        Node node = stack.pop();</span><br><span class="line">        visit(node);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = node.children.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            stack.push(node.children.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)多叉树的层次遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="function">List&lt;Integer&gt; <span class="title">levelOrder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> len = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            Node node = queue.poll();</span><br><span class="line">            temp.add(node.val);</span><br><span class="line">            <span class="keyword">for</span> (Node child : node.children) &#123;</span><br><span class="line">                queue.offer(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.add(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（4）多叉树的后序遍历 非递归<br>按照“头右左”遍历 ，然后再翻转<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postOrder</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        Node node = stack.pop();</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        <span class="keyword">for</span> (Node child : node.children) &#123;</span><br><span class="line">            stack.push(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.reverse(list);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树的前序遍历&quot;&gt;&lt;a href=&quot;#二叉树的前序遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的前序遍历&quot;&gt;&lt;/a&gt;二叉树的前序遍历&lt;/h3&gt;&lt;p&gt;（1）递归形式&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;tab
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM类加载器</title>
    <link href="http://yoursite.com/2018/03/15/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>http://yoursite.com/2018/03/15/JVM类加载器/</id>
    <published>2018-03-15T07:37:19.000Z</published>
    <updated>2019-03-15T08:16:37.637Z</updated>
    
    <content type="html"><![CDATA[<!--# JVM类加载器--><p>JVM提供了三大内置的类加载器，BootStrap ClassLoader  —&gt; Ext ClassLoader  —–&gt; Application ClassLoader  (—–&gt;   Custom ClassLoader)<br>他们之间严格遵守父委托的机制；<br><a id="more"></a></p><h2 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1. 类加载器"></a>1. 类加载器</h2><h3 id="（1）根类加载器（Bootstrap类加载器）"><a href="#（1）根类加载器（Bootstrap类加载器）" class="headerlink" title="（1）根类加载器（Bootstrap类加载器）"></a>（1）根类加载器（Bootstrap类加载器）</h3><p>最顶层加载器，C++编写，负责虚拟机核心类库的加载，例如java.lang包，通过-Xbootclasspath指定其路径</p><h3 id="（2）扩展类加载器"><a href="#（2）扩展类加载器" class="headerlink" title="（2）扩展类加载器"></a>（2）扩展类加载器</h3><p>其父加载器为根加载器，主要用于加载JAVA_HOME下jre\lb\ext子目录中的类库</p><h3 id="（3）系统类加载器"><a href="#（3）系统类加载器" class="headerlink" title="（3）系统类加载器"></a>（3）系统类加载器</h3><p>其负责加载classpath下的类库资源，其父加载器是扩展类加载器，同时也是自定义类加载器的默认父加载器，其加载路径一般通过-classpath或者-cp指定</p><h3 id="（4）自定义类加载器"><a href="#（4）自定义类加载器" class="headerlink" title="（4）自定义类加载器"></a>（4）自定义类加载器</h3><p>应用：OSGI、Tomcat的容器隔离</p><h2 id="2-双亲委托机制"><a href="#2-双亲委托机制" class="headerlink" title="2.双亲委托机制"></a>2.双亲委托机制</h2><h3 id="1-双亲委托"><a href="#1-双亲委托" class="headerlink" title="(1)双亲委托"></a>(1)双亲委托</h3><p>双亲委托机制，也称为父委托机制——-当一个类加载器被调用loadClass之后，它并不会直接将其加载，而是先交给当前类加载器的父类加载器尝试加载直到最顶层的父加载器，然后依次向下进行加载。</p><p>打破双亲委托机制的方法：<br>（1）可以绕过系统类加载器，直接将扩展类加载器作为MyClassLoader的父加载器；<br>（2）在构造MyCLassLoader的时候指定其父类加载器为null；</p><p>破坏双亲委托机制的应用：热部署—–热部署首先要卸载加载该模块的所有Class的类加载器，卸载类加载器会导致所有类的卸载，由于不能对三大内置加载器进行卸载，只有通过控制自定类加载器才能做到这一点。</p><h3 id="（2）命名空间"><a href="#（2）命名空间" class="headerlink" title="（2）命名空间"></a>（2）命名空间</h3><p>类加载器命名空间，由该加载器及其所有的父加载器所有构成；使用不同的类加载器，或者同一个类加载器的不同实例，去加载同一个class，则会在堆内存和方法区产生多个class的对象。</p><p>在JVM运行时class会有一个运行时包，运行时包是由类加载器的命名空间和类的全限定名称共同组成的，例如：<br>BootstrapClassLoader.ExtClassLoader.AppClassLoader.MyClassLoader.com.ljz.concurrent.chapter10.Test</p><p>在类的加载过程中，所有参与的类加载器，即使没有亲自加载过该类，也会被标识为该类的初始类加载器（一个列表维护）</p><h3 id="（3）类的卸载"><a href="#（3）类的卸载" class="headerlink" title="（3）类的卸载"></a>（3）类的卸载</h3><p>某个对象在堆内存如果没有其他地方引用则会在垃圾回收器线程进行GC的时候被回收；而JVM规定Class只有满足一下3个条件才会被GC回收（类卸载）：（a）该类所有实例都已经被GC；（b）加载该类的ClassLoader实例被回收；（c）该类的class实例没有在其他地方被引用；</p>]]></content>
    
    <summary type="html">
    
      &lt;!--# JVM类加载器--&gt;
&lt;p&gt;JVM提供了三大内置的类加载器，BootStrap ClassLoader  —&amp;gt; Ext ClassLoader  —–&amp;gt; Application ClassLoader  (—–&amp;gt;   Custom ClassLoader)&lt;br&gt;他们之间严格遵守父委托的机制；&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Java中类的加载过程</title>
    <link href="http://yoursite.com/2018/03/14/Java%E4%B8%AD%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/14/Java中类的加载过程/</id>
    <published>2018-03-14T12:25:51.000Z</published>
    <updated>2019-03-15T07:38:22.001Z</updated>
    
    <content type="html"><![CDATA[<!--# Java中类的加载过程--><p>ClassLoader的主要职责是负责加载各种class文件到JVM中，并且在JVM中生成构成这个类的各个数据结构，然后时期分布在JVM的对应内存区域中。  </p><p>类的加载过程一般分为加载阶段、连接阶段和初始化阶段。</p><h2 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1.加载阶段"></a>1.加载阶段</h2><p>主要负责查找并且加载类的二进制数据文件（class文件）;<br>然后将该字节流所代表的静态存储结构转换为<strong>方法区</strong>中运行时的数据结构，并且在堆内存中生成一个该类的java.lang.Class对象，作为访问方法区数据结构的入口。<br>类加载的最终产物就是堆内存中的class对象<br><a id="more"></a></p><h2 id="2-连接阶段"><a href="#2-连接阶段" class="headerlink" title="2.连接阶段"></a>2.连接阶段</h2><p>（1）验证<br>确保类文件的正确性，例如class版本、魔数是否正确<br>（2）准备<br>为类的静态变量分配内存，并且为其初始化默认值。<br>类变量的内存会被分配到方法区中；<br>（3）解析<br>把类中的符合引用转换为直接引用。<br>解析过程主要针对类接口、字段、类方法和接口方法这四类中进行。</p><h2 id="3-初始化阶段"><a href="#3-初始化阶段" class="headerlink" title="3. 初始化阶段"></a>3. 初始化阶段</h2><p>为类的静态变量赋予正确的初始值（代码编写阶段给定的值）,即执行<clinit>方法；<br>静态语句块只能对后面的静态变量进行赋值，但是不能对其进行访问；JVM保证了<clinit>方法在多线程的执行环境下的同步语义；</clinit></clinit></p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h2><p>（1）JVM对类的初始化是一个延迟的机制（lazy的方式），当一个类在<strong>首次</strong>（主动）使用的时候才会被初始化。<br>（2）通过子类使用父类的静态变量只会导致父类的初始化，子类则不会被初始化。<br>（3）类的被动使用，不会导致类的加载和初始化。例如，构造某个类的数组时并不会导致该类的初始化（仅仅在堆内存开辟了一段连续的地址空间）<br>（4）引用类的静态常量不会导致类的初始化，例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">50</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!--# Java中类的加载过程--&gt;
&lt;p&gt;ClassLoader的主要职责是负责加载各种class文件到JVM中，并且在JVM中生成构成这个类的各个数据结构，然后时期分布在JVM的对应内存区域中。  &lt;/p&gt;
&lt;p&gt;类的加载过程一般分为加载阶段、连接阶段和初始化阶段。&lt;/p&gt;
&lt;h2 id=&quot;1-加载阶段&quot;&gt;&lt;a href=&quot;#1-加载阶段&quot; class=&quot;headerlink&quot; title=&quot;1.加载阶段&quot;&gt;&lt;/a&gt;1.加载阶段&lt;/h2&gt;&lt;p&gt;主要负责查找并且加载类的二进制数据文件（class文件）;&lt;br&gt;然后将该字节流所代表的静态存储结构转换为&lt;strong&gt;方法区&lt;/strong&gt;中运行时的数据结构，并且在堆内存中生成一个该类的java.lang.Class对象，作为访问方法区数据结构的入口。&lt;br&gt;类加载的最终产物就是堆内存中的class对象&lt;br&gt;
    
    </summary>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的Integer Pool 和 autoboxing-same-value-to-different-objects问题</title>
    <link href="http://yoursite.com/2017/11/07/JavaInteger/"/>
    <id>http://yoursite.com/2017/11/07/JavaInteger/</id>
    <published>2017-11-07T02:06:48.000Z</published>
    <updated>2019-03-01T02:08:30.413Z</updated>
    
    <content type="html"><![CDATA[<p>##1. <strong>遇到问题</strong><br>昨天刷题的时候遇到一个很有趣的整数比较的问题, 整理如下：<br>（1）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">127</span>;</span><br><span class="line">System.out.println(i == j);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">128</span>;</span><br><span class="line">System.out.println(i == j);</span><br></pre></td></tr></table></figure><p>这两个输出应该都是true，没有问题。<br><a id="more"></a><br>（2）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   Integer i = <span class="number">127</span>;</span><br><span class="line">Integer j = <span class="number">127</span>;</span><br><span class="line">System.out.println(i == j);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   Integer i = <span class="number">128</span>;</span><br><span class="line">Integer j = <span class="number">128</span>;</span><br><span class="line">System.out.println(i == j);</span><br></pre></td></tr></table></figure><p>第一个输出的是true, 第二个输出的是false, 这里就比较有意思了，哈哈~<br>（3）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   Integer i = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">System.out.println(i == j);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   Integer i = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">System.out.println(i == j);</span><br></pre></td></tr></table></figure><p>这两个输出的都是false, emmmmmmmmmm, 是不是有点懵圈。。。。。</p><hr><p>##<strong>2. 解决问题</strong><br>首先，应该知道java中的自动装箱和自动拆箱机制。简而言之，就是在Java中，jvm会自动实现基本数据类型和与之相对应的类的之间的自动转换。例如int和Integer之间能够自由的转换。</p><p>其次，应该明白对象之间用“==”比较，比较的是内存中的对象是否一样（可以理解为地址是否一样）。</p><p>然后，对于第一种情况，两个int之间的比较，比较的是数值，符合我们的常规认识。 对于第二种情况，127之间的比较返回true, 128之间的比较返回false，是因为jvm中包含一个整数池（pool of Integer values ） ，这个Integer Pool只包含-128 - 127。所以当创建一个-128到127之间的Integer时，会自动引用池中的对象，故127之间的比较返回true，而创建小于-128或大于127的Integer时，则会另外单独创建，所有两个128是不同的对象，他们之间的比较自然返回false。对于第三种情况，采用 new关键字创建整数对象时，会在内存中创建不同的对象，所以这种情况下，不管value大小，他们之间的比较必然返回false。</p><hr><p>##<strong>3.总结</strong><br>（1）整数之间直接用“==”比较大小，可能会出现autoboxing-same-value-to-different-objects问题；<br>（2）int之间用”==”比较，比较的是二者值是否相同；<br>（3）jvm中有一个Integer Pool，包含-128 - 127之间的整数对象。当采用直接赋值的方法创建Integer时，能用池中对象直接表示的，会继续引用池中的对象，超出范围的才会创建新的对象（这也是jvm节省内存空间的一种策略）；<br>（4）采用new关键字创建Integer对象时，会创建新的对象，而不是引用整数池中的对象。</p><hr><p>##<strong>4. Objects.equals()方法</strong><br>尝试了一下，不用“==”进行上述的比较，而用Objects.equals()方法进行上述的比较。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">int</span> i1 = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">int</span> j1 = <span class="number">127</span>;</span><br><span class="line">System.out.println(Objects.equals(i1, j1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i2 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">int</span> j2 = <span class="number">128</span>;</span><br><span class="line">System.out.println(Objects.equals(i2, j2));</span><br><span class="line"></span><br><span class="line">Integer i3 = <span class="number">127</span>;</span><br><span class="line">Integer j3 = <span class="number">127</span>;</span><br><span class="line">System.out.println(Objects.equals(i3, j3));</span><br><span class="line"></span><br><span class="line">Integer i4 = <span class="number">128</span>;</span><br><span class="line">Integer j4 = <span class="number">128</span>;</span><br><span class="line">System.out.println(Objects.equals(i4, j4));</span><br><span class="line"></span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">Integer j5 = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">System.out.println(Objects.equals(i5, j5));</span><br><span class="line"></span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">Integer j6 = <span class="keyword">new</span> Integer(<span class="number">128</span>);</span><br><span class="line">System.out.println(Objects.equals(i6, j6));</span><br></pre></td></tr></table></figure></p><p>上述结果输出的都是true， 如何理解呢？emmmmmmmmm……….<br>先看Objects.equals方法的说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Returns true if the arguments are equal to each other and false otherwise. Consequently, if both arguments are null, true is returned and if exactly one argument is null, false is returned. Otherwise, equality is determined by using the equals method of the first argument.</span><br></pre></td></tr></table></figure></p><p>所以这个方法会调用第一个参数的equals方法，上述例子中也就是调用Integer的equals方法。而Integer的equals方法比较的是两个整数的int value值是否相同，故返回true。</p><hr><p>##<strong>5. 参考资料</strong><br><a href="http://www.devx.com/tips/Tip/42276" target="_blank" rel="noopener">http://www.devx.com/tips/Tip/42276</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##1. &lt;strong&gt;遇到问题&lt;/strong&gt;&lt;br&gt;昨天刷题的时候遇到一个很有趣的整数比较的问题, 整理如下：&lt;br&gt;（1）&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(i == j);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(i == j);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个输出应该都是true，没有问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java 中hashCode()和equals()方法</title>
    <link href="http://yoursite.com/2017/09/25/hashCodeAndEquals/"/>
    <id>http://yoursite.com/2017/09/25/hashCodeAndEquals/</id>
    <published>2017-09-24T16:46:43.000Z</published>
    <updated>2019-03-01T02:05:06.139Z</updated>
    
    <content type="html"><![CDATA[<p>Java中，涉及到两个对象的比较时，我们会用到hashCode()和equals()。这两个方法是Object类中定义的方法。</p><hr><p>###<strong>1. api中的描述</strong><br>(1)hashCode()<br>hashCode()方法给对象返回一个hash code值。这个方法被用于hash tables，例如HashMap。<br>它的性质是：<br><a id="more"></a></p><ul><li>在一个Java应用的执行期间，如果一个对象提供给equals做比较的信息没有被修改的话，该对象多次调用hashCode()方法，该方法必须始终如一返回同一个integer。</li><li>如果两个对象根据equals(Object)方法是相等的，那么调用二者各自的hashCode()方法必须产生同一个integer结果。</li><li>并不要求根据equals(java.lang.Object)方法不相等的两个对象，调用二者各自的hashCode()方法必须产生不同的integer结果。然而，程序员应该意识到对于不同的对象产生不同的integer结果，有可能会提高hash table的性能。</li></ul><p>大量的实践表明，由Object类定义的hashCode()方法对于不同的对象返回不同的integer。</p><p>(2)equals()<br>equals()进行的内容比较，而已经不再是地址的比较。依次类推Math、Integer、Double等这些类都是重写了equals()方法的，从而进行的是内容的比较。当然，基本类型是进行值的比较。</p><p>它的性质有：</p><ul><li>自反性（reflexive）。对于任意不为null的引用值x，x.equals(x)一定是true。</li><li>对称性（symmetric）。对于任意不为null的引用值x和y，当且仅当x.equals(y)是true时，y.equals(x)也是true。</li><li>传递性（transitive）。对于任意不为null的引用值x、y和z，如果x.equals(y)是true，同时y.equals(z)是true，那么x.equals(z)一定是true。</li><li>一致性（consistent）。对于任意不为null的引用值x和y，如果用于equals比较的对象信息没有被修改的话，多次调用时x.equals(y)要么一致地返回true要么一致地返回false。</li><li>对于任意不为null的引用值x，x.equals(null)返回false。</li></ul><p>对于Object类来说，equals()方法在对象上实现的是差别可能性最大的等价关系，即，对于任意非null的引用值x和y，当且仅当x和y引用的是同一个对象，该方法才会返回true。<br>需要注意的是当equals()方法被override时，hashCode()也要被override。按照一般hashCode()方法的实现来说，相等的对象，它们的hash code一定相等。</p><hr><p>###<strong>2. 总结</strong></p><ol><li><p>在Object类中，未覆盖的hashcode（）方法产生的hashcode, 可标识该对象在hash表中位置。</p></li><li><p>由于hash表可能会产生hash冲突，所以hashCode相同的对象不一等相等。</p></li><li><p>在Object类中，未覆盖的equals方法，使用“==”进行比较的，比较的是两个对象的地址是否相同。</p></li><li><p>如果两个对象equals比较为真，即两个对象相等，则两个对象的hashcode一定相同；反过来，两个对象的hashcode相同，不代表两个对象相同（有可能hash冲突），equals比较不一定为真</p></li><li><p>在hashset 或者hashMap中，新加入一个对象的时候，它会使用对象的HashCode()值来判断对象加入的位置，但同时也会与其他的已经加入的对象的HashCode作对比，如果没有相符的hashcode，Hahset或者HashMap就会假设新对象没有重复出现。如果HashCode（）相同，接下来才会比较两个对象是否真正相同。<br>采用这种先比较hashcode才比较是否相等的方式，可以极大地提高hashset，hashmap查找插入的效率。（时间复杂度为O(1)）</p></li></ol><hr><p>###<strong>3.覆盖Object类的hashCode()和equals（）方法</strong><br>我们可以根据自己的需要来覆盖Object类中的hashCode()和equals（）方法。<br>例如String中的hashcode（）和equals（）方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * Returns a hash code for this string. The hash code for a </span></span><br><span class="line"><span class="comment">    * &lt;code&gt;String&lt;/code&gt; object is computed as </span></span><br><span class="line"><span class="comment">    * &lt;blockquote&gt;&lt;pre&gt; </span></span><br><span class="line"><span class="comment">    * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] </span></span><br><span class="line"><span class="comment">    * &lt;/pre&gt;&lt;/blockquote&gt; </span></span><br><span class="line"><span class="comment">    * using &lt;code&gt;int&lt;/code&gt; arithmetic, where &lt;code&gt;s[i]&lt;/code&gt; is the </span></span><br><span class="line"><span class="comment">    * &lt;i&gt;i&lt;/i&gt;th character of the string, &lt;code&gt;n&lt;/code&gt; is the length of </span></span><br><span class="line"><span class="comment">    * the string, and &lt;code&gt;^&lt;/code&gt; indicates exponentiation. </span></span><br><span class="line"><span class="comment">    * (The hash value of the empty string is zero.) </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  a hash code value for this object. </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="keyword">int</span> h = hash;  </span><br><span class="line">       <span class="keyword">int</span> len = count;  </span><br><span class="line"><span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">    <span class="keyword">int</span> off = offset;  </span><br><span class="line">    <span class="keyword">char</span> val[] = value;  </span><br><span class="line">  </span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;  </span><br><span class="line">               h = <span class="number">31</span>*h + val[off++];  </span><br><span class="line">           &#125;  </span><br><span class="line">           hash = h;  </span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="keyword">return</span> h;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span> </span></span><br><span class="line"><span class="comment">    * true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span> </span></span><br><span class="line"><span class="comment">    * String&#125; object that represents the same sequence of characters as this </span></span><br><span class="line"><span class="comment">    * object. </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  anObject </span></span><br><span class="line"><span class="comment">    *         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125; </span></span><br><span class="line"><span class="comment">    *          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>  #compareTo(String) </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>  #equalsIgnoreCase(String) </span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;  </span><br><span class="line">    String anotherString = (String)anObject;  </span><br><span class="line">    <span class="keyword">int</span> n = count;  </span><br><span class="line">    <span class="keyword">if</span> (n == anotherString.count) &#123;  </span><br><span class="line">    <span class="keyword">char</span> v1[] = value;  </span><br><span class="line">    <span class="keyword">char</span> v2[] = anotherString.value;  </span><br><span class="line">    <span class="keyword">int</span> i = offset;  </span><br><span class="line">    <span class="keyword">int</span> j = anotherString.offset;  </span><br><span class="line">    <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (v1[i++] != v2[j++])  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><p>###<strong>4. 参考资料</strong></p><ol><li><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()" target="_blank" rel="noopener">https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()</a></li><li><a href="http://www.cnblogs.com/Qian123/p/5703507.html" target="_blank" rel="noopener">http://www.cnblogs.com/Qian123/p/5703507.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java中，涉及到两个对象的比较时，我们会用到hashCode()和equals()。这两个方法是Object类中定义的方法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;###&lt;strong&gt;1. api中的描述&lt;/strong&gt;&lt;br&gt;(1)hashCode()&lt;br&gt;hashCode()方法给对象返回一个hash code值。这个方法被用于hash tables，例如HashMap。&lt;br&gt;它的性质是：&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentModificationException和fail-fast机制</title>
    <link href="http://yoursite.com/2017/09/23/ConcurrentModificationException/"/>
    <id>http://yoursite.com/2017/09/23/ConcurrentModificationException/</id>
    <published>2017-09-23T07:09:03.000Z</published>
    <updated>2019-03-01T02:05:23.260Z</updated>
    
    <content type="html"><![CDATA[<p>##<strong>单线程下：</strong></p><p>###1. ConcurrentModificationException出现的原因<br>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Integer integer = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(integer == <span class="number">3</span>)</span><br><span class="line">                list.remove(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(Unknown Source)</span><br><span class="line">at java.util.ArrayList$Itr.next(Unknown Source)</span><br><span class="line">at leetcode.Test.main(Test.java:13)</span><br></pre></td></tr></table></figure></p><p>这时出现了ConcurrentModificationException，官方文档中关于这个异常的解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class ConcurrentModificationException extends RuntimeException</span><br><span class="line">This exception may be thrown by methods that have detected concurrent modification</span><br><span class="line"> of an object when such modification is not permissible.</span><br><span class="line">For example, it is not generally permissible for one thread to modify a Collection </span><br><span class="line">while another thread is iterating over it. In general, the results of the iteration </span><br><span class="line">are undefined under these circumstances. Some Iterator implementations (including those </span><br><span class="line">of all the general purpose collection implementations provided by the JRE) may choose</span><br><span class="line"> to throw this exception if this behavior is detected. Iterators that do this are </span><br><span class="line">arbitrary, non-deterministic behavior at an undetermined time in the future.</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>程序在对 collection 进行迭代时，某个线程对该 collection 在结构上对其做了修改，这时迭代器就会抛出 ConcurrentModificationException 异常信息，从而产生 fail-fast。</p><p>Iterator是工作在一个独立的线程中，并且拥有一个 mutex 锁。 Iterator被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 Iterator 会马上抛出java.util.ConcurrentModificationException异常。</p><p>###2. 解决办法<br>我们可先看看以从Iterator（）方法的具体实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> cursor != size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           checkForComodification();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        E next = get(cursor);</span><br><span class="line">        lastRet = cursor++;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">           checkForComodification();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">            cursor--;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码不想多说，可以看到next()的checkForComodification()方法中会判断modCount和 expectedModCount的值是否相等。如果你在集合遍历过程中，删除某个元素的话，会使得modCount != expectedModCount，从而抛出ConcurrentModificationException()。</p><p>解决办法:细心的朋友会发现Itr中有remove方法，我们可以调用这个方法，实现删除元素的操作，从而不会引起ConcurrentModificationException。Iterator.remove() 方法会在删除当前迭代对象的同时维护索引的一致性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Integer integer = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(integer == <span class="number">3</span>)</span><br><span class="line">                iterator.remove();<span class="comment">//使用Iterator的remove方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>##<strong>多线程下：</strong></p><p>###1. 出现原因<br>多线程下同样会出现ConcurrentModificationException(),例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    Integer integer = iterator.next();</span><br><span class="line">                    System.out.println(integer);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    Integer integer = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span>(integer==<span class="number">2</span>)</span><br><span class="line">                        iterator.remove(); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码中thread1和thread2同时用iterator 对List对集合进行遍历，同样会产生ConcurrentModificationException()。产生的原因和单线程时是类似的，同样是两个线程的异步操作使得expectedModCount和modCount的值不一样，从而产生fail-fast。</p><p>###2. 解决办法<br>1）在使用iterator迭代的时候使用synchronized或者Lock进行同步；<br>2）使用并发容器CopyOnWriteArrayList代替ArrayList和Vector。（推荐使用）</p><p>CopyOnWriterArrayList所代表的核心概念就是：任何对array在结构上有所改变的操作（add、remove、clear等），CopyOnWriterArrayList都会copy现有的数据，再在copy的数据上修改，这样就不会影响COWIterator中的数据了，修改完成之后改变原有数据的引用即可。同时这样造成的代价就是产生大量的对象，同时数组的copy也是相当有损耗的，故使用CopyOnWriterArrayList会使效率有所下降。</p><p>关于CopyOnWriteArrayList可以参照：<a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html</a></p><p>这部分我现在了解的不是很透彻，以后再来补充。</p><hr><p>##<strong>注意事项：</strong></p><ol><li><p>Java中增强for循环（for each），底层的实现是通过Iterator迭代器模式实现的，所以它也会产生ConcurrentModificationException。</p></li><li><p>迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。</p></li></ol><hr><p>##<strong>参考资料：</strong></p><ol><li><a href="http://www.cnblogs.com/dolphin0520/p/3933551.html" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/p/3933551.html</a></li><li><a href="http://www.hollischuang.com/archives/1776" target="_blank" rel="noopener">http://www.hollischuang.com/archives/1776</a></li><li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/ConcurrentModificationException.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/7/docs/api/java/util/ConcurrentModificationException.html</a></li><li><a href="http://blog.csdn.net/chenssy/article/details/38151189" target="_blank" rel="noopener">http://blog.csdn.net/chenssy/article/details/38151189</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;strong&gt;单线程下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###1. ConcurrentModificationException出现的原因&lt;br&gt;例子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;  &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Integer&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        list.add(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Iterator&amp;lt;Integer&amp;gt; iterator = list.iterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(iterator.hasNext())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Integer integer = iterator.next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(integer == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                list.remove(integer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Floyd&#39;s Cycle Detection Algorithm（Floyd判圈算法）</title>
    <link href="http://yoursite.com/2017/09/01/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/09/01/Floyd判圈算法/</id>
    <published>2017-09-01T08:37:08.000Z</published>
    <updated>2019-03-01T01:59:34.458Z</updated>
    
    <content type="html"><![CDATA[<!-- #Floyd判圈算法--><hr><p>###<strong>1. 什么是Floyd判圈算法？</strong><br>Floyd判圈算法(Floyd Cycle Detection Algorithm)，又称龟兔赛跑算法(Tortoise and Hare Algorithm)，是一个可以在有限状态机、迭代函数或者链表上判断是否存在环，求出该环的起点与长度的算法。</p><hr><p>###<strong>2. 算法描述</strong><br>如果有限状态机、迭代函数或者链表上存在环，那么在某个环上以不同速度前进的2个指针必定会在某个时刻相遇。同时显然地，如果从同一个起点(即使这个起点不在某个环上)同时开始以不同速度前进的2个指针最终相遇，那么可以判定存在一个环，且可以求出2者相遇处所在的环的起点与长度。<br><a id="more"></a></p><p>Floyd Cycle Detection Algorithm主要解决三个问题：</p><ol><li>检测是否有环；</li><li>如果有环，求环的起点； </li><li>如果有环，求环的长度；<br>####<strong>(1)检测是否有环</strong><br>基本思想：<br>这个可以用跑步来解释，假设两个人从同一起点出发（不从同一起点也可以），以不同的速度向前跑，最终快的人一定会追上慢的人（套圈）。可以将速度快的人换做兔子，速度慢的人换做乌龟，就变成龟兔赛跑了，23333…….</li></ol><p>基于上述思想，我们可以这样检测是否有环：<br>初始状态下，假设起点为S。现设两个指针t和h，将它们均指向S。接着，让t和h同时以不同的速度向前推进：t速度为v，h速度为2v。当h无法向前推进时，即可确定没有环；如果t与h相遇，则可以确定有环。（注意，起点不一定在环上。）</p><p>####<strong>（2）如果有环，求环的起点；</strong><br>基本思想：<br>在上述算法判断出存在环时，显然t和h在同一位置。此时，只要令h仍位于原来的位置M，而令t返回起点S，此时h与t之间距为环C长度的整数倍。随后，同时让t和h以相同的速度往前推进：即t每前进1步，h前进1步。持续该过程直至t与h再一次相遇，此相遇地点即为环C的一个起点P。</p><p>很多小伙伴看到这儿会很困惑，为毛是这样呢？我们可以用图来解释一下。<br><img src="http://img.blog.csdn.net/20170901160426538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbDk0NzA2OTk2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>已经确定有环，设起点到环的起点距离为m，环的周长为n，第一次相遇时距离环的起点的距离为k，第一次相遇时慢指针在环上转了a圈，快指针在环上转了b圈。（这里假定h的速度是t速度的2倍）<br>两者第一次相遇时，慢指针移动的距离i为： i = m + a<em>n + k; 快指针速度是慢指针速度的2倍，故快指针移动的距离2i为： 2i = m + b</em>n + k。两者相减得，i = (b-a)*n，即i是环长度的倍数。此时，按上述算法，令慢指针返回起点，两个指针均以慢指针的速度同时向前推进。当慢指针推进m时，会到达环的起点，此时快指针移动的总距离为 2i+m。考虑这个 2i+m，可以理解为从起点走m，到达环起点，然后走了整数倍的环长度，故最终快指针也会到达环起点（即快慢指指针在环起点相遇）。</p><p>####<strong>（3）如果有环，求环的长度；</strong><br>基本思想：<br>这个相对来说比较简单。只需要在快慢指针相遇时，保持一个指针不动，让另外一个指针向前推进，记录其步数。当两个指针再次相遇时，第二个指针推进的步数，即为环的长度。</p><hr><p>###<strong>3. 算法实现</strong><br>这里引用一个维基上的python的算法实现，其他语言的也类似。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">floyd</span><span class="params">(f, x0)</span>:</span></span><br><span class="line">    <span class="comment"># Main phase of algorithm: finding a repetition x_i = x_2i.</span></span><br><span class="line">    <span class="comment"># The hare moves twice as quickly as the tortoise and</span></span><br><span class="line">    <span class="comment"># the distance between them increases by 1 at each step.</span></span><br><span class="line">    <span class="comment"># Eventually they will both be inside the cycle and then,</span></span><br><span class="line">    <span class="comment"># at some point, the distance between them will be</span></span><br><span class="line">    <span class="comment"># divisible by the period λ.</span></span><br><span class="line">    tortoise = f(x0) <span class="comment"># f(x0) is the element/node next to x0.</span></span><br><span class="line">    hare = f(f(x0))</span><br><span class="line">    <span class="keyword">while</span> tortoise != hare:</span><br><span class="line">        tortoise = f(tortoise)</span><br><span class="line">        hare = f(f(hare))</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># At this point the tortoise position, ν, which is also equal</span></span><br><span class="line">    <span class="comment"># to the distance between hare and tortoise, is divisible by</span></span><br><span class="line">    <span class="comment"># the period λ. So hare moving in circle one step at a time, </span></span><br><span class="line">    <span class="comment"># and tortoise (reset to x0) moving towards the circle, will </span></span><br><span class="line">    <span class="comment"># intersect at the beginning of the circle. Because the </span></span><br><span class="line">    <span class="comment"># distance between them is constant at 2ν, a multiple of λ,</span></span><br><span class="line">    <span class="comment"># they will agree as soon as the tortoise reaches index μ.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the position μ of first repetition.    </span></span><br><span class="line">    mu = <span class="number">0</span></span><br><span class="line">    tortoise = x0</span><br><span class="line">    <span class="keyword">while</span> tortoise != hare:</span><br><span class="line">        tortoise = f(tortoise)</span><br><span class="line">        hare = f(hare)   <span class="comment"># Hare and tortoise move at same speed</span></span><br><span class="line">        mu += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Find the length of the shortest cycle starting from x_μ</span></span><br><span class="line">    <span class="comment"># The hare moves one step at a time while tortoise is still.</span></span><br><span class="line">    <span class="comment"># lam is incremented until λ is found.</span></span><br><span class="line">    lam = <span class="number">1</span></span><br><span class="line">    hare = f(tortoise)</span><br><span class="line">    <span class="keyword">while</span> tortoise != hare:</span><br><span class="line">        hare = f(hare)</span><br><span class="line">        lam += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> lam, mu</span><br></pre></td></tr></table></figure></p><hr><p>###<strong>4. 算法复杂度</strong><br>时间复杂度:</p><p>注意到当指针t到达环C的起点时(此时指针h显然在环C上)，之后指针t最多仅可能走1圈。若设起点S到环起点P距离为 m，环C的长度为 n，则时间复杂度为O(m+n)，是线性时间的算法。</p><p>空间复杂度：</p><p>仅需要创立指针t、指针h，保存环长n、环的一个起点P。空间复杂度为 O(1)，是常数空间的算法。</p><p>最后，说一下，大多数情况下，判断是否有环的问题，也可以用HashSet来实现，即每次用HashSet记录出现过的节点，当一个节点重复出现时，即可判断存在环。HashSet这种方法的空间复杂度为O(n), 故从空间复杂度的角度考虑，Floyd判圈算法要优于HashSet这种方法。</p><hr><p>参考资料：</p><ol><li><a href="https://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare</a></li><li><a href="https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95</a></li><li><a href="https://stackoverflow.com/questions/2936213/explain-how-finding-cycle-start-node-in-cycle-linked-list-work" target="_blank" rel="noopener">https://stackoverflow.com/questions/2936213/explain-how-finding-cycle-start-node-in-cycle-linked-list-work</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- #Floyd判圈算法--&gt;
&lt;hr&gt;
&lt;p&gt;###&lt;strong&gt;1. 什么是Floyd判圈算法？&lt;/strong&gt;&lt;br&gt;Floyd判圈算法(Floyd Cycle Detection Algorithm)，又称龟兔赛跑算法(Tortoise and Hare Algorithm)，是一个可以在有限状态机、迭代函数或者链表上判断是否存在环，求出该环的起点与长度的算法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;###&lt;strong&gt;2. 算法描述&lt;/strong&gt;&lt;br&gt;如果有限状态机、迭代函数或者链表上存在环，那么在某个环上以不同速度前进的2个指针必定会在某个时刻相遇。同时显然地，如果从同一个起点(即使这个起点不在某个环上)同时开始以不同速度前进的2个指针最终相遇，那么可以判定存在一个环，且可以求出2者相遇处所在的环的起点与长度。&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Trie(Prefix Tree)前缀树</title>
    <link href="http://yoursite.com/2017/08/28/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    <id>http://yoursite.com/2017/08/28/前缀树/</id>
    <published>2017-08-28T09:03:11.000Z</published>
    <updated>2019-03-01T02:00:02.359Z</updated>
    
    <content type="html"><![CDATA[<p>##<strong>1. 什么是Trie?</strong></p><hr><p>Trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。<br>Trie可以看作是一个确定有限状态自动机，尽管边上的符号一般是隐含在分支的顺序中的。<br><a id="more"></a><br><img src="http://img.blog.csdn.net/20170828145016686?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbDk0NzA2OTk2Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><p>##<strong>2. Trie的应用</strong></p><hr><p>(1) 自动补全<br>例如,你在百度搜索的输入框中,输入一个单词的前半部分,它能够自动补全出可能的单词结果。<br>(2) 拼写检查<br>例如,在word中输入一个拼写错误的单词, 它能够自动检测出来。<br>(3) IP路由表<br>在IP路由表中进行路由匹配时, 要按照最长匹配前缀的原则进行匹配。<br>(4) T9预测文本<br>在大多手机输入法中, 都会用9格的那种输入法. 这个输入法能够根据用户在9格上的输入,自动匹配出可能的单词。<br>(5) 填单词游戏<br>相信大多数人都玩过那种在横竖的格子里填单词的游戏。</p><hr><p>##<strong>3. Trie的相关操作</strong></p><hr><p>###<strong>(1)Trie的结点结构</strong></p><ul><li>根结点一般为空</li><li>每个结点最多有R个孩子,每个孩子分别对应字母表数据集中的一个字母(通常情况下,R为26,字母表为26个英文字母 ).</li><li>每个结点都有一个boolean类型的域, 代表这个结点是否是一个key的末尾.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// R links to node children</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode[] links;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> R = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        links = <span class="keyword">new</span> TrieNode[R];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> links[ch -<span class="string">'a'</span>] != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">get</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> links[ch -<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">char</span> ch, TrieNode node)</span> </span>&#123;</span><br><span class="line">        links[ch -<span class="string">'a'</span>] = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isEnd = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>###<strong>(2) 向trie中插入一个关键字</strong><br>基本思想:<br>从根结点开始, 向下依次寻找当前结点的link中, 是否有与关键字key中相应位置的字母相同的link;</p><ul><li>如果有:沿着该link到下一层继续寻找;</li><li>如果没有: 则新建一个node, 插入当前结点的link中,然后沿link到下一层继续寻找；</li></ul><p>向下遍历到key的末尾时, 修改该结点的boolean指示值,表示是关键字末尾.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inserts a word into the trie.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> currentChar = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!node.containsKey(currentChar)) &#123;</span><br><span class="line">                node.put(currentChar, <span class="keyword">new</span> TrieNode());</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.get(currentChar);</span><br><span class="line">        &#125;</span><br><span class="line">        node.setEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>时间复杂度O(m), m是关键字字符串的长度; 空间复杂度也为O(m), m是关键字字符串的长度.</p><p>###<strong>(3) 在trie中查找一个关键字</strong><br>基本思想:<br>从根结点开始, 根据关键字中的字母,沿着不同的link向下搜寻, 依次比较当前节点的link中是否有和关键字相应字母相同的link.</p><ul><li>如果有,则继续到下一层搜寻</li><li>如果没有, 说明已经到一个单词的末尾. 此时看关键字是否遍历到了末尾,如果到了末尾的话, 说明匹配成功; 如果没有到末尾,说明只匹配到了关键字的一个前缀,匹配失败.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// search a prefix or whole key in trie and</span></span><br><span class="line">    <span class="comment">// returns the node where search ends</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TrieNode <span class="title">searchPrefix</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">           <span class="keyword">char</span> curLetter = word.charAt(i);</span><br><span class="line">           <span class="keyword">if</span> (node.containsKey(curLetter)) &#123;</span><br><span class="line">               node = node.get(curLetter);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns if the word is in the trie.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">       TrieNode node = searchPrefix(word);</span><br><span class="line">       <span class="keyword">return</span> node != <span class="keyword">null</span> &amp;&amp; node.isEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>时间复杂度O(m), m是关键字字符串长度；空间复杂度O(1).</p><p>###<strong>(4) 在trie中查找一个关键字是否是前缀</strong><br>这个操作和(3)在trie中查找一个关键字很相似, 不同的是, 这里的关键字不必是某个单词的末尾, 只需是前缀即可.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns if there is any word in the trie</span></span><br><span class="line">    <span class="comment">// that starts with the given prefix.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode node = searchPrefix(prefix);</span><br><span class="line">        <span class="keyword">return</span> node != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>时间复杂度O(m), m是关键字字符串长度；空间复杂度O(1).</p><hr><p>##<strong>4. Trie的优点</strong></p><hr><p>还有其他几种数据结构，如平衡树和哈希表，它们可以在字符串数据集中搜索一个单词。那为什么我们还需要trie？<br>虽然哈希表在查找某个关键字时有O（1）的时间复杂度，但以下操作效率不高：</p><ul><li>用共同的前缀查找所有的键。</li><li>以字典顺序列举字符串数据集。</li></ul><p>trie优于哈希表的另一个原因是，随着哈希表的大小增加，会有很多哈希冲突，搜索时间复杂度可能会恶化到 O（n），其中n是插入的f关键字的数量。当存储具有相同前缀的多个关键字时，Trie可以使用比哈希表少的空间。在这种情况下，使用trie只有O（m）时间复杂度，其中m是关键字长度。而在平衡树中查找关键字的时间复杂度为 O（mlogn）。</p><p>参考资料:</p><ol><li><a href="https://en.wikipedia.org/wiki/Trie" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Trie</a></li><li><a href="https://leetcode.com/articles/implement-trie-prefix-tree/" target="_blank" rel="noopener">https://leetcode.com/articles/implement-trie-prefix-tree/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##&lt;strong&gt;1. 什么是Trie?&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。&lt;br&gt;Trie可以看作是一个确定有限状态自动机，尽管边上的符号一般是隐含在分支的顺序中的。&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://yoursite.com/2017/07/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2017/07/15/二分查找/</id>
    <published>2017-07-15T02:49:34.000Z</published>
    <updated>2019-03-01T02:00:23.371Z</updated>
    
    <content type="html"><![CDATA[<!-- #二分查找（binary search）--><p> 二分查找对于学过数据结构或者算法的人来说，应该是非常熟悉的。其<strong>基本思想</strong>是：比较目标（target）和中间关键字的大小关系，如果二者相等，则查找完毕；如果二者不等，则可以根据二者的大小关系，将查找的范围减半。</p><p>虽然二分查找的算法很简单，但是对于一个code新手来说，正确无误地实现一个二分查找算法也不是那么容易的。<br><a id="more"></a><br>最近，刷了几道二分查找的题目，将刷题的一点收获整理如下：</p><p>####1．二分查找算法适用的范围：<br>①必须是顺序表，不适用于链式存储<br>②查找之前，序列必须是有序的。对于无序的序列，可以先采用合适的排序算法进行排序后，再使用二分查找。</p><p>####2．二分查找算法的基本模式：<br>递归方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> khey)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &gt; end)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(arr[mid] &gt; khey)</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr,start,mid-<span class="number">1</span>,khey);</span><br><span class="line">    <span class="keyword">if</span>(arr[mid] &lt; khey)</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr,mid+<span class="number">1</span>,end,khey);</span><br><span class="line">    <span class="keyword">return</span> mid;<span class="comment">//最后检测相等是因为大多数情况下是小于或者大于</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非递归方式：（更常用）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> khey)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(start &lt;= end)&#123;</span><br><span class="line">        mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid] &lt; khey)</span><br><span class="line">            start = mid +<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; khey)</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，需要注意的地方有：<br>① 我们学习二分算法的时候，求mid可能会用：mid = （start + end）/2，这时，在计算start+end的时候，可能会产生溢出，故以上所写的两种方式，均采用start + （end - start） / 2的方式，有时候可以避免溢出。<br>②在非递归算法中，while循环中究竟应该是（start &lt; end）还是（start &lt;= end），这应该具体情况具体分析；<br>③对于mid和khey比较的三种情况（大于，小于，相等）的排列顺序，大多数情况下，是影响不大的，实际中，可以根据三种情况出现的概率，决定其顺序；<br>④以上仅仅是二分查找算法的模板，具体使用时应该具体情况具体分析，灵活运用。</p><p>####3．二分查找的复杂度<br>时间复杂度：<strong>O(logn)</strong><br>空间复杂度：<strong>O(1)</strong></p><p>在有些地方你可能会看到三分查找(ternary search)，三分查找基本思想和二分查找一致，具体来讲：每次选出三分之一点和三分之二点，而不是中点，然后比较target和这两个点的大小关系，从而将查找的范围缩小至原来的三分之一。</p><p>二分查找和三分查找的空间复杂度都是O(1)，而二分查找的时间复杂度是O（log<sub>2</sub>n），三分查找的时间复杂度是O(log<sub>3</sub>n)。既然三分查找的时间复杂度要优于二分查找，那我们为什么不经常使用三分查找，而经常使用二分查找呢？原因在于在最坏情况下，三分查找要明显劣于二分查找。这个具体的推导过程就不详述了， 想了解的可以参考<a href="https://leetcode.com/problems/guess-number-higher-or-lower/solution/" target="_blank" rel="noopener">这道题目</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- #二分查找（binary search）--&gt;
&lt;p&gt; 二分查找对于学过数据结构或者算法的人来说，应该是非常熟悉的。其&lt;strong&gt;基本思想&lt;/strong&gt;是：比较目标（target）和中间关键字的大小关系，如果二者相等，则查找完毕；如果二者不等，则可以根据二者的大小关系，将查找的范围减半。&lt;/p&gt;
&lt;p&gt;虽然二分查找的算法很简单，但是对于一个code新手来说，正确无误地实现一个二分查找算法也不是那么容易的。&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World !!!</title>
    <link href="http://yoursite.com/2017/07/15/hello-world/"/>
    <id>http://yoursite.com/2017/07/15/hello-world/</id>
    <published>2017-07-15T00:43:34.000Z</published>
    <updated>2019-03-01T01:48:15.084Z</updated>
    
    <content type="html"><![CDATA[<!-- # Hello World !!!--><p>很早之前就想搭一个自己的博客，一直没有搞～ 之前写的一些文章，就直接放到了CSDN上。  最近看到了一个比较棒的博客，心里瞬间觉得自己也想搞一个。之后应该会陆续把一部分原先的文章迁过来，也会不定时更新一些新的技术文章，或者个人总结。</p><p>千里之行，始于足下～ 希望自己能够一直坚持下去～</p><a id="more"></a><p>如果大家对我的博客有什么意见或者建议的话，欢迎通过邮箱<a href="mailto:lijinzhong2051@163.com" target="_blank" rel="noopener">lijinzhong2051@163.com</a>联系我～</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Hello World !!!--&gt;
&lt;p&gt;很早之前就想搭一个自己的博客，一直没有搞～ 之前写的一些文章，就直接放到了CSDN上。  最近看到了一个比较棒的博客，心里瞬间觉得自己也想搞一个。之后应该会陆续把一部分原先的文章迁过来，也会不定时更新一些新的技术文章，或者个人总结。&lt;/p&gt;
&lt;p&gt;千里之行，始于足下～ 希望自己能够一直坚持下去～&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
